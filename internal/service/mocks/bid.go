// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	dto "ssr/internal/dto"
	entity "ssr/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthRepo is a mock of IAuthRepo interface.
type MockIAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepoMockRecorder
}

// MockIAuthRepoMockRecorder is the mock recorder for MockIAuthRepo.
type MockIAuthRepoMockRecorder struct {
	mock *MockIAuthRepo
}

// NewMockIAuthRepo creates a new mock instance.
func NewMockIAuthRepo(ctrl *gomock.Controller) *MockIAuthRepo {
	mock := &MockIAuthRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepo) EXPECT() *MockIAuthRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIAuthRepo) GetUserByEmail(email string) (*entity.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*entity.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIAuthRepoMockRecorder) Get(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIAuthRepo)(nil).GetUserByEmail), email)
}

// MockIAuthUC is a mock of IAuthUC interface.
type MockIAuthUC struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUCMockRecorder
}

// MockIAuthUCMockRecorder is the mock recorder for MockIAuthUC.
type MockIAuthUCMockRecorder struct {
	mock *MockIAuthUC
}

// NewMockIAuthUC creates a new mock instance.
func NewMockIAuthUC(ctrl *gomock.Controller) *MockIAuthUC {
	mock := &MockIAuthUC{ctrl: ctrl}
	mock.recorder = &MockIAuthUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUC) EXPECT() *MockIAuthUCMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockIAuthUC) Login(email, password string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", email, password)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIAuthUCMockRecorder) Login(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthUC)(nil).Login), email, password)
}

// MockIProfileRepo is a mock of IProfileRepo interface.
type MockIProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileRepoMockRecorder
}

// MockIProfileRepoMockRecorder is the mock recorder for MockIProfileRepo.
type MockIProfileRepoMockRecorder struct {
	mock *MockIProfileRepo
}

// NewMockIProfileRepo creates a new mock instance.
func NewMockIProfileRepo(ctrl *gomock.Controller) *MockIProfileRepo {
	mock := &MockIProfileRepo{ctrl: ctrl}
	mock.recorder = &MockIProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileRepo) EXPECT() *MockIProfileRepoMockRecorder {
	return m.recorder
}

// GetStudentProfile mocks base method.
func (m *MockIProfileRepo) GetStProfile(email string) (*entity.StProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStProfile", email)
	ret0, _ := ret[0].(*entity.StProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentProfile indicates an expected call of GetStudentProfile.
func (mr *MockIProfileRepoMockRecorder) GetStudentProfile(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStProfile", reflect.TypeOf((*MockIProfileRepo)(nil).GetStProfile), email)
}

// GetSupervisorProfile mocks base method.
func (m *MockIProfileRepo) GetSvProfile(email string) (*entity.SvProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSvProfile", email)
	ret0, _ := ret[0].(*entity.SvProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorProfile indicates an expected call of GetSupervisorProfile.
func (mr *MockIProfileRepoMockRecorder) GetSupervisorProfile(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSvProfile", reflect.TypeOf((*MockIProfileRepo)(nil).GetSvProfile), email)
}

// MockIProfileUC is a mock of IProfileUC interface.
type MockIProfileUC struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileUCMockRecorder
}

// MockIProfileUCMockRecorder is the mock recorder for MockIProfileUC.
type MockIProfileUCMockRecorder struct {
	mock *MockIProfileUC
}

// NewMockIProfileUC creates a new mock instance.
func NewMockIProfileUC(ctrl *gomock.Controller) *MockIProfileUC {
	mock := &MockIProfileUC{ctrl: ctrl}
	mock.recorder = &MockIProfileUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileUC) EXPECT() *MockIProfileUCMockRecorder {
	return m.recorder
}

// GetStudentProfile mocks base method.
func (m *MockIProfileUC) GetStudentProfile(email string) (*dto.StProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStProfile", email)
	ret0, _ := ret[0].(*dto.StProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentProfile indicates an expected call of GetStudentProfile.
func (mr *MockIProfileUCMockRecorder) GetStudentProfile(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStProfile", reflect.TypeOf((*MockIProfileUC)(nil).GetStudentProfile), email)
}

// GetSupervisorProfile mocks base method.
func (m *MockIProfileUC) GetSupervisorProfile(email string) (*dto.SvProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSvProfile", email)
	ret0, _ := ret[0].(*dto.SvProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorProfile indicates an expected call of GetSupervisorProfile.
func (mr *MockIProfileUCMockRecorder) GetSupervisorProfile(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSvProfile", reflect.TypeOf((*MockIProfileUC)(nil).GetSupervisorProfile), email)
}

// MockIRelRepo is a mock of IRelRepo interface.
type MockIRelRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRelRepoMockRecorder
}

// MockIRelRepoMockRecorder is the mock recorder for MockIRelRepo.
type MockIRelRepoMockRecorder struct {
	mock *MockIRelRepo
}

// NewMockIRelRepo creates a new mock instance.
func NewMockIRelRepo(ctrl *gomock.Controller) *MockIRelRepo {
	mock := &MockIRelRepo{ctrl: ctrl}
	mock.recorder = &MockIRelRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelRepo) EXPECT() *MockIRelRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRelRepo) Create(studentID, supervisorID, workID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", studentID, supervisorID, workID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRelRepoMockRecorder) Create(studentID, supervisorID, workID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRelRepo)(nil).Create), studentID, supervisorID, workID)
}

// GetStudentViewBidPlenty mocks base method.
func (m *MockIRelRepo) GetStudentViewBidPlenty(studentID int) ([]*entity.StRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentBids", studentID)
	ret0, _ := ret[0].([]*entity.StRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentViewBidPlenty indicates an expected call of GetStudentViewBidPlenty.
func (mr *MockIRelRepoMockRecorder) GetStudentViewBidPlenty(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentBids", reflect.TypeOf((*MockIRelRepo)(nil).GetStudentViewBidPlenty), studentID)
}

// GetStudentViewSSR mocks base method.
func (m *MockIRelRepo) GetStudentViewSSR(studentID, ssrID int) (*entity.StRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentRelation", studentID, ssrID)
	ret0, _ := ret[0].(*entity.StRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentViewSSR indicates an expected call of GetStudentViewSSR.
func (mr *MockIRelRepoMockRecorder) GetStudentViewSSR(studentID, ssrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentRelation", reflect.TypeOf((*MockIRelRepo)(nil).GetStudentViewSSR), studentID, ssrID)
}

// GetSupervisorViewBidPlenty mocks base method.
func (m *MockIRelRepo) GetSupervisorViewBidPlenty(studentID int) ([]*entity.SvRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupervisorBids", studentID)
	ret0, _ := ret[0].([]*entity.SvRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorViewBidPlenty indicates an expected call of GetSupervisorViewBidPlenty.
func (mr *MockIRelRepoMockRecorder) GetSupervisorViewBidPlenty(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupervisorBids", reflect.TypeOf((*MockIRelRepo)(nil).GetSupervisorViewBidPlenty), studentID)
}

// UpdateStatus mocks base method.
func (m *MockIRelRepo) UpdateStatus(id int, newStatus entity.StatusSSR) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, newStatus)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIRelRepoMockRecorder) UpdateStatus(id, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIRelRepo)(nil).UpdateStatus), id, newStatus)
}

// MockIStudentBidUC is a mock of IStudentBidUC interface.
type MockIStudentBidUC struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentBidUCMockRecorder
}

// MockIStudentBidUCMockRecorder is the mock recorder for MockIStudentBidUC.
type MockIStudentBidUCMockRecorder struct {
	mock *MockIStudentBidUC
}

// NewMockIStudentBidUC creates a new mock instance.
func NewMockIStudentBidUC(ctrl *gomock.Controller) *MockIStudentBidUC {
	mock := &MockIStudentBidUC{ctrl: ctrl}
	mock.recorder = &MockIStudentBidUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentBidUC) EXPECT() *MockIStudentBidUCMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockIStudentBidUC) Apply(data *dto.ApplyBid) (*dto.ApplyBidResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", data)
	ret0, _ := ret[0].(*dto.ApplyBidResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockIStudentBidUCMockRecorder) Apply(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockIStudentBidUC)(nil).Apply), data)
}

// GetStudentBids mocks base method.
func (m *MockIStudentBidUC) GetStudentBids(studentID int) (*dto.StBids, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentBids", studentID)
	ret0, _ := ret[0].(*dto.StBids)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentBids indicates an expected call of GetStudentBids.
func (mr *MockIStudentBidUCMockRecorder) GetStudentBids(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentBids", reflect.TypeOf((*MockIStudentBidUC)(nil).GetStudentBids), studentID)
}

// MockISupervisorBidUC is a mock of ISupervisorBidUC interface.
type MockISupervisorBidUC struct {
	ctrl     *gomock.Controller
	recorder *MockISupervisorBidUCMockRecorder
}

// MockISupervisorBidUCMockRecorder is the mock recorder for MockISupervisorBidUC.
type MockISupervisorBidUCMockRecorder struct {
	mock *MockISupervisorBidUC
}

// NewMockISupervisorBidUC creates a new mock instance.
func NewMockISupervisorBidUC(ctrl *gomock.Controller) *MockISupervisorBidUC {
	mock := &MockISupervisorBidUC{ctrl: ctrl}
	mock.recorder = &MockISupervisorBidUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISupervisorBidUC) EXPECT() *MockISupervisorBidUCMockRecorder {
	return m.recorder
}

// GetSupervisorBids mocks base method.
func (m *MockISupervisorBidUC) GetSupervisorBids(supervisorID int) (*dto.SvBids, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupervisorBids", supervisorID)
	ret0, _ := ret[0].(*dto.SvBids)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorBids indicates an expected call of GetSupervisorBids.
func (mr *MockISupervisorBidUCMockRecorder) GetSupervisorBids(supervisorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupervisorBids", reflect.TypeOf((*MockISupervisorBidUC)(nil).GetSupervisorBids), supervisorID)
}

// Resolve mocks base method.
func (m *MockISupervisorBidUC) Resolve(data *dto.ResolveBid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockISupervisorBidUCMockRecorder) Resolve(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockISupervisorBidUC)(nil).Resolve), data)
}

// MockIStudentRelUC is a mock of IStudentRelUC interface.
type MockIStudentRelUC struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentRelUCMockRecorder
}

// MockIStudentRelUCMockRecorder is the mock recorder for MockIStudentRelUC.
type MockIStudentRelUCMockRecorder struct {
	mock *MockIStudentRelUC
}

// NewMockIStudentRelUC creates a new mock instance.
func NewMockIStudentRelUC(ctrl *gomock.Controller) *MockIStudentRelUC {
	mock := &MockIStudentRelUC{ctrl: ctrl}
	mock.recorder = &MockIStudentRelUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentRelUC) EXPECT() *MockIStudentRelUCMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIStudentRelUC) Create(data *dto.CreateSSR) (*dto.StViewRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(*dto.StViewRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIStudentRelUCMockRecorder) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStudentRelUC)(nil).Create), data)
}

// MockIWorkRepo is a mock of IWorkRepo interface.
type MockIWorkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkRepoMockRecorder
}

// MockIWorkRepoMockRecorder is the mock recorder for MockIWorkRepo.
type MockIWorkRepoMockRecorder struct {
	mock *MockIWorkRepo
}

// NewMockIWorkRepo creates a new mock instance.
func NewMockIWorkRepo(ctrl *gomock.Controller) *MockIWorkRepo {
	mock := &MockIWorkRepo{ctrl: ctrl}
	mock.recorder = &MockIWorkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkRepo) EXPECT() *MockIWorkRepoMockRecorder {
	return m.recorder
}

// GetSupervisorsByWorkID mocks base method.
func (m *MockIWorkRepo) GetSupervisorsByWorkID(workID int) ([]*entity.WorkSv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupervisorsByWorkID", workID)
	ret0, _ := ret[0].([]*entity.WorkSv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorsByWorkID indicates an expected call of GetSupervisorsByWorkID.
func (mr *MockIWorkRepoMockRecorder) GetSupervisorsByWorkID(workID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupervisorsByWorkID", reflect.TypeOf((*MockIWorkRepo)(nil).GetSupervisorsByWorkID), workID)
}

// GetWorksByStudentID mocks base method.
func (m *MockIWorkRepo) GetWorksByStudentID(studentID int) ([]*entity.Work, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorksByStudentID", studentID)
	ret0, _ := ret[0].([]*entity.Work)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorksByStudentID indicates an expected call of GetWorksByStudentID.
func (mr *MockIWorkRepoMockRecorder) GetWorksByStudentID(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorksByStudentID", reflect.TypeOf((*MockIWorkRepo)(nil).GetWorksByStudentID), studentID)
}

// GetWorksBySupervisorID mocks base method.
func (m *MockIWorkRepo) GetWorksBySupervisorID(supervisorID int) ([]*entity.SvWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorksBySupervisorID", supervisorID)
	ret0, _ := ret[0].([]*entity.SvWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorksBySupervisorID indicates an expected call of GetWorksBySupervisorID.
func (mr *MockIWorkRepoMockRecorder) GetWorksBySupervisorID(supervisorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorksBySupervisorID", reflect.TypeOf((*MockIWorkRepo)(nil).GetWorksBySupervisorID), supervisorID)
}

// MockIStudentWorkUC is a mock of IStudentWorkUC interface.
type MockIStudentWorkUC struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentWorkUCMockRecorder
}

// MockIStudentWorkUCMockRecorder is the mock recorder for MockIStudentWorkUC.
type MockIStudentWorkUCMockRecorder struct {
	mock *MockIStudentWorkUC
}

// NewMockIStudentWorkUC creates a new mock instance.
func NewMockIStudentWorkUC(ctrl *gomock.Controller) *MockIStudentWorkUC {
	mock := &MockIStudentWorkUC{ctrl: ctrl}
	mock.recorder = &MockIStudentWorkUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentWorkUC) EXPECT() *MockIStudentWorkUCMockRecorder {
	return m.recorder
}

// GetStudentWorks mocks base method.
func (m *MockIStudentWorkUC) GetStudentWorks(studentID int) (*dto.StWorks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentWorks", studentID)
	ret0, _ := ret[0].(*dto.StWorks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentWorks indicates an expected call of GetStudentWorks.
func (mr *MockIStudentWorkUCMockRecorder) GetStudentWorks(studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentWorks", reflect.TypeOf((*MockIStudentWorkUC)(nil).GetStudentWorks), studentID)
}

// GetWorkSupervisors mocks base method.
func (m *MockIStudentWorkUC) GetWorkSupervisors(workID int) (*dto.WorkSvPlenty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkSupervisors", workID)
	ret0, _ := ret[0].(*dto.WorkSvPlenty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkSupervisors indicates an expected call of GetWorkSupervisors.
func (mr *MockIStudentWorkUCMockRecorder) GetWorkSupervisors(workID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkSupervisors", reflect.TypeOf((*MockIStudentWorkUC)(nil).GetWorkSupervisors), workID)
}

// MockISupervisorWorkUC is a mock of ISupervisorWorkUC interface.
type MockISupervisorWorkUC struct {
	ctrl     *gomock.Controller
	recorder *MockISupervisorWorkUCMockRecorder
}

// MockISupervisorWorkUCMockRecorder is the mock recorder for MockISupervisorWorkUC.
type MockISupervisorWorkUCMockRecorder struct {
	mock *MockISupervisorWorkUC
}

// NewMockISupervisorWorkUC creates a new mock instance.
func NewMockISupervisorWorkUC(ctrl *gomock.Controller) *MockISupervisorWorkUC {
	mock := &MockISupervisorWorkUC{ctrl: ctrl}
	mock.recorder = &MockISupervisorWorkUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISupervisorWorkUC) EXPECT() *MockISupervisorWorkUCMockRecorder {
	return m.recorder
}

// GetSupervisorWorks mocks base method.
func (m *MockISupervisorWorkUC) GetSupervisorWorks(supervisorID int) (*dto.SvWorkPlenty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupervisorWorks", supervisorID)
	ret0, _ := ret[0].(*dto.SvWorkPlenty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupervisorWorks indicates an expected call of GetSupervisorWorks.
func (mr *MockISupervisorWorkUCMockRecorder) GetSupervisorWorks(supervisorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupervisorWorks", reflect.TypeOf((*MockISupervisorWorkUC)(nil).GetSupervisorWorks), supervisorID)
}
